{"ast":null,"code":"var _jsxFileName = \"/Users/doseon/Desktop/Hancom AI/Practice/React/todo-app/src/components/organisms/TodoContainer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect } from \"react\";\nimport TodoInput from \"../molecules/TodoInput\";\nimport TodoList from \"./TodoList\";\nimport Button from \"../atoms/Button\";\nimport styles from \"./TodoContainer.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContainer = ({\n  todos,\n  addTodo,\n  toggleComplete,\n  deleteTodo,\n  editTodo,\n  clearAll,\n  reorderTodos\n}) => {\n  _s();\n  // 마감일 알림 확인\n  const checkDueDateNotifications = useCallback(() => {\n    const today = new Date();\n    const todayStr = today.toISOString().split(\"T\")[0];\n    const dueTodayTodos = todos.filter(todo => !todo.complete && todo.dueDate === todayStr);\n    if (dueTodayTodos.length > 0) {\n      alert(`오늘 마감일인 할 일이 ${dueTodayTodos.length}개 있습니다!`);\n    }\n  }, [todos]);\n\n  // 컴포넌트 마운트 시 알림 확인\n  useEffect(() => {\n    checkDueDateNotifications();\n    // 매일 자정에 알림 확인 (실제 앱에서는 더 복잡한 알림 시스템 필요)\n    const now = new Date();\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n    const timeUntilMidnight = tomorrow.getTime() - now.getTime();\n    const timerId = setTimeout(checkDueDateNotifications, timeUntilMidnight);\n    return () => clearTimeout(timerId);\n  }, [checkDueDateNotifications]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.todoContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"To Do\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoInput, {\n      addTodo: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      todos: todos,\n      toggleComplete: toggleComplete,\n      deleteTodo: deleteTodo,\n      editTodo: editTodo,\n      reorderTodos: reorderTodos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.deleteBtnWrap,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: clearAll,\n        children: \"Clear All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoContainer, \"UvQWcA0vBCbOXfOH/pdjrWe3iaU=\");\n_c = TodoContainer;\nexport default TodoContainer;\nvar _c;\n$RefreshReg$(_c, \"TodoContainer\");","map":{"version":3,"names":["React","useCallback","useEffect","TodoInput","TodoList","Button","styles","jsxDEV","_jsxDEV","TodoContainer","todos","addTodo","toggleComplete","deleteTodo","editTodo","clearAll","reorderTodos","_s","checkDueDateNotifications","today","Date","todayStr","toISOString","split","dueTodayTodos","filter","todo","complete","dueDate","length","alert","now","tomorrow","setDate","getDate","setHours","timeUntilMidnight","getTime","timerId","setTimeout","clearTimeout","className","todoContainer","children","fileName","_jsxFileName","lineNumber","columnNumber","deleteBtnWrap","onClick","_c","$RefreshReg$"],"sources":["/Users/doseon/Desktop/Hancom AI/Practice/React/todo-app/src/components/organisms/TodoContainer.tsx"],"sourcesContent":["import React, { useCallback, useEffect } from \"react\";\nimport TodoInput from \"../molecules/TodoInput\";\nimport TodoList from \"./TodoList\";\nimport Button from \"../atoms/Button\";\nimport styles from \"./TodoContainer.module.css\";\n\ninterface Todo {\n  id: string;\n  content: string;\n  complete: boolean;\n  dueDate?: string;\n}\n\ninterface TodoContainerProps {\n  todos: Todo[];\n  addTodo: (content: string, dueDate?: string) => void;\n  toggleComplete: (id: string) => void;\n  deleteTodo: (id: string) => void;\n  editTodo: (id: string, content: string, dueDate?: string) => void;\n  clearAll: () => void;\n  reorderTodos: (startIndex: number, endIndex: number) => void;\n}\n\nconst TodoContainer: React.FC<TodoContainerProps> = ({\n  todos,\n  addTodo,\n  toggleComplete,\n  deleteTodo,\n  editTodo,\n  clearAll,\n  reorderTodos,\n}) => {\n  // 마감일 알림 확인\n  const checkDueDateNotifications = useCallback(() => {\n    const today = new Date();\n    const todayStr = today.toISOString().split(\"T\")[0];\n\n    const dueTodayTodos = todos.filter(\n      (todo) => !todo.complete && todo.dueDate === todayStr\n    );\n\n    if (dueTodayTodos.length > 0) {\n      alert(`오늘 마감일인 할 일이 ${dueTodayTodos.length}개 있습니다!`);\n    }\n  }, [todos]);\n\n  // 컴포넌트 마운트 시 알림 확인\n  useEffect(() => {\n    checkDueDateNotifications();\n    // 매일 자정에 알림 확인 (실제 앱에서는 더 복잡한 알림 시스템 필요)\n    const now = new Date();\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n\n    const timeUntilMidnight = tomorrow.getTime() - now.getTime();\n\n    const timerId = setTimeout(checkDueDateNotifications, timeUntilMidnight);\n    return () => clearTimeout(timerId);\n  }, [checkDueDateNotifications]);\n\n  return (\n    <div className={styles.todoContainer}>\n      <h1>To Do</h1>\n      <TodoInput addTodo={addTodo} />\n      <TodoList\n        todos={todos}\n        toggleComplete={toggleComplete}\n        deleteTodo={deleteTodo}\n        editTodo={editTodo}\n        reorderTodos={reorderTodos}\n      />\n      <div className={styles.deleteBtnWrap}>\n        <Button onClick={clearAll}>Clear All</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}